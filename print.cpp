#include <iostream>
#include <Windows.h>
#include <thread>
#include <string>
#include "EyeStep-Reborn-master/eyestep.h"
#include "EyeStep-Reborn-master/eyestep_utility.h"

void console(const char* title);

int main() {
    console("Print_t");

    EyeStep::open(GetCurrentProcess());

    auto print_call = EyeStep::util::nextCall(EyeStep::scanner::scan_xrefs("Video recording started")[0]);

    typedef int(__cdecl* printf)(int, const char*, ...);
    printf print = reinterpret_cast<printf>(reinterpret_cast<std::uintptr_t>(GetModuleHandle(nullptr)) + EyeStep::util::raslr(print_call));

    std::string type;
    std::string text;
    bool close_questionmark = true;

    std::cout << "*************************START**********************\n";
    std::cout << "Types are, normal = 0, info = 1, warn = 2, error = 3\n";
    do {
        
           std::cout << "Text: ";
           std::getline(std::cin, text);
           const char* get_text = text.c_str();
           
           std:: cout << "Type: ";
           std::getline(std::cin, type);
           
           switch (std::stoi(type))
           {
           case 0:
           case 1:
           case 2:
           case 3:
               print(std::stoi(type), get_text);
               break;
           default:
               std::cout << "invalid input please choose a value between 0-3\n";
               break;
        }

    } while (close_questionmark);

}

void console(const char* title) {
    DWORD old;
    VirtualProtect(reinterpret_cast <PVOID> (&FreeConsole), 1, PAGE_EXECUTE_READWRITE, &old);
    *reinterpret_cast <std::uint8_t*> (&FreeConsole) = 0xC3;
    VirtualProtect(&FreeConsole, 1, old, &old);
    AllocConsole();
    SetConsoleTitleA(title);
    FILE* file_stream;
    freopen_s(&file_stream, "CONOUT$", "w", stdout);
    freopen_s(&file_stream, "CONOUT$", "w", stderr);
    freopen_s(&file_stream, "CONIN$", "r", stdin);
}

BOOL __stdcall DllMain(HINSTANCE Dll, DWORD Reason, LPVOID Reserved) {
    if (Reason == DLL_PROCESS_ATTACH) {
        CreateThread(0, 0, (LPTHREAD_START_ROUTINE)main, 0, 0, 0);
    }
    return TRUE;
}
