#include <iostream>
#include <Windows.h>
#include <thread>
#include <string>

#define ASLR(x)(x - 0x0)

using namespace std;
void console(const char* title);

void main() {
    console("Prrr");

    const auto print = reinterpret_cast <int(__cdecl*)(int,const char*, ...)> (reinterpret_cast <std::uintptr_t> (GetModuleHandle(nullptr)) + ASLR(0xC34AB0));

    char typ;
    string pr;
    string k;
    bool t = true;

    cout << "*************************START**********************\n";
    cout << "Types are, normal = 0, info = 1, warn = 2, error = 3\n";
    do {
        cout << "Text ";
        cin >> pr;
        const char* v = pr.c_str();
    jum:
        cout << "Type ";
        cin >> typ;
        switch (typ) {
        case '0':
            print(0, v);
            break;
        case '1':
            print(1, v);
            break;
        case '2':
            print(2, v);
            break;
        case '3':
            print(3, v);
            break;
        default:
            cout << (string)"Please Enter A Valid Type Number\n";
            Sleep(1000);
            goto jum;
        }

    } while (t);

}



void console(const char* title) {
    DWORD asdmemes;
    VirtualProtect((PVOID)&FreeConsole, 1, PAGE_EXECUTE_READWRITE, &asdmemes);
    *(BYTE*)(&FreeConsole) = 0xC3;
    AllocConsole();
    SetConsoleTitleA(title);
    freopen("CONOUT$", "w", stdout);
    freopen("CONIN$", "r", stdin);
    HWND ConsoleHandle = GetConsoleWindow();
    ::SetWindowPos(ConsoleHandle, HWND_TOP, 0, 0, 0, 0, SWP_DRAWFRAME | SWP_NOMOVE | SWP_NOSIZE | SWP_SHOWWINDOW);
    ::ShowWindow(ConsoleHandle, SW_NORMAL);
}

BOOL __stdcall DllMain(HINSTANCE Dll, DWORD Reason, LPVOID Reserved) {
    if (Reason == DLL_PROCESS_ATTACH) {
        CreateThread(0, 0, (LPTHREAD_START_ROUTINE)main, 0, 0, 0);
    }
    return TRUE;
}
